classdef music < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure    matlab.ui.Figure
        Menu        matlab.ui.container.Menu
        Menu_2      matlab.ui.container.Menu
        Menu_3      matlab.ui.container.Menu
        Menu_4      matlab.ui.container.Menu
        UIAxes      matlab.ui.control.UIAxes
        Label_2     matlab.ui.control.Label
        Label_6     matlab.ui.control.Label
        Slider      matlab.ui.control.Slider
        Panel       matlab.ui.container.Panel
        UIAxes3     matlab.ui.control.UIAxes
        UIAxes4     matlab.ui.control.UIAxes
        TabGroup    matlab.ui.container.TabGroup
        Tab         matlab.ui.container.Tab
        Label_15    matlab.ui.control.Label
        UIAxes_6    matlab.ui.control.UIAxes
        Button_5    matlab.ui.control.Button
        UIAxes2_5   matlab.ui.control.UIAxes
        UIAxes2_7   matlab.ui.control.UIAxes
        Button_9    matlab.ui.control.Button
        UIAxes14    matlab.ui.control.UIAxes
        Button_16   matlab.ui.control.Button
        Tab_5       matlab.ui.container.Tab
        Label_17    matlab.ui.control.Label
        UIAxes_7    matlab.ui.control.UIAxes
        Button_10   matlab.ui.control.Button
        Button_11   matlab.ui.control.Button
        Label_18    matlab.ui.control.Label
        UIAxes2_8   matlab.ui.control.UIAxes
        UIAxes2_9   matlab.ui.control.UIAxes
        UIAxes14_2  matlab.ui.control.UIAxes
        Button_17   matlab.ui.control.Button
        Tab_6       matlab.ui.container.Tab
        UIAxes_8    matlab.ui.control.UIAxes
        Button_12   matlab.ui.control.Button
        Button_13   matlab.ui.control.Button
        UIAxes2_10  matlab.ui.control.UIAxes
        UIAxes2_11  matlab.ui.control.UIAxes
        UIAxes14_3  matlab.ui.control.UIAxes
        Button_18   matlab.ui.control.Button
        Tab_7       matlab.ui.container.Tab
        UIAxes_9    matlab.ui.control.UIAxes
        Button_14   matlab.ui.control.Button
        Button_15   matlab.ui.control.Button
        UIAxes2_12  matlab.ui.control.UIAxes
        UIAxes2_13  matlab.ui.control.UIAxes
        UIAxes14_4  matlab.ui.control.UIAxes
        Button_19   matlab.ui.control.Button
        Button_7    matlab.ui.control.Button
        Button_8    matlab.ui.control.Button
    end

    
    properties (Access = private)
        Property % Description
        filename %文件名
        time %x轴坐标
        audio %原始音频文件
        Fs %原始音频采样频率
        Player %初始音乐播放文件
        hFig %新窗口句柄
        low_param1 %低通滤波器阶数
        low_param2 %低通滤波器截止频率
        Initial_timer %初始文件定时器
        Low_timer %低通定时器
        high_timer %高通定时器
        allow_timer %带通定时器
        ban_timer %带阻定时器
        high_param1 %高通滤波器阶数
        high_param2 %高通滤波器截止频率
        allow_param1 %带通滤波器阶数
        allow_param2 %带通滤波器中心频率
        allow_param3 %带通滤波器通带频率
        ban_param1 %带阻滤波器阶数
        ban_param2 %带阻滤波器中心频率
        ban_param3 %带阻滤波器阻带频率
        high_Player %高通滤波器音乐文件
        low_Player %低通滤波器音乐文件
        allow_Player %带通滤波器音乐文件
        ban_Player %带阻滤波器音乐文件
        ban_param4 %带阻滤波器上截止频率
        low_filteredAudio %低通音乐数据
        high_filteredAudio%高通音乐数据
        allow_filteredAudio%带通音乐数据
        ban_filteredAudio %带阻音乐数据
    end
    
    methods (Access = private)
        
        % 定时器：播放窗口设置
        function sound_timer(signal,player,half_space)
            % 计算片段左右侧索引
            left = player.CurrentSample - half_space;%CurrentSample 是指当前音乐播放器已经播放的采样点数是指当前音乐播放器已经播放的采样点数
            right = player.CurrentSample + half_space;
            left = max(1,left);%定义左侧位置
            right = min(right,length(signal));%定义右侧位置
            data_fragment = signal(left:right);%读取此时的数据
            FS=player.SampleRate;
            t = ([left:right]-1)/player.SampleRate;%player.SampleRate为采样点数
            %绘制时域波形
            if left<=1
                data_fragment = [zeros(1,right-left+1),data_fragment];%取帧的数据
                t = [(2*left-right-1:left-1)/player.SampleRate,t];
            end
            if right>=length(signal)
                data_fragment = [data_fragment,zeros(1,right-left+1)];
                t = [t,(right+1:2*right-left+1)/player.SampleRate];
            end
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/player.SampleRate,signal,'k-')
            hold on,plot(t,data_fragment,'r-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            plot(t,data_fragment,'r-')
            
            xlabel('时间/s')
            ylabel('幅值')
            
            % 计算频谱
            Y = fft(data_fragment);
            L = length(Y);
            P2 = abs(Y);
            f = FS*(0:ceil((L+1)/2)-1)/L;
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)));
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            subplot(3,1,3)
            bar(f(idx),P11(idx));
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            
            
        end
    end
    
    

    % Callbacks that handle component events
    methods (Access = private)

        % Menu selected function: Menu_3
        function Menu_3Selected(app, event)
            selection=questdlg('关闭此应用程序','关闭请求','是','否','否');
            switch selection
                case '是'
                    delete(app.UIFigure);
                case    '否'
                    return
            end
        end

        % Menu selected function: Menu_2
        function Menu_2Selected(app, event)
            %选择文件
            [filename, filepath] = uigetfile({'*.flac'}, 'Select a file');
            if isequal(filename, 0) || isequal(filepath, 0)
                % 用户取消选择文件
                return;
            else
                % 加载所选文件
                app.filename = fullfile(filepath, filename);
                [app.audio, app.Fs] = audioread(app.filename);
            end
            
            % 计算时间轴
            app.time = (0:length(app.audio)-1)/app.Fs;
            
            % 绘制时域波形
            plot(app.UIAxes,app.time,app.audio);
            
            ylim([-1 1]);
            xlabel(app.UIAxes,'Time (s)');
            ylabel(app.UIAxes,'Amplitude');
            title(app.UIAxes,'时域波形');
            
            % 计算频谱
            audio_len=length(app.audio);%计算音频信号的长度
            N=2^nextpow2(audio_len);
            
            Y = fft(app.audio,N);
            L = length(Y);
            P2 = abs(Y);
            f = app.Fs*(0:ceil((L+1)/2)-1)/L;
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)),1);
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            bar(app.UIAxes3,f(idx),P11(idx));
            xlabel(app.UIAxes3,'频率 (Hz)');
            ylabel(app.UIAxes3,'幅度');
            title(app.UIAxes3,'左声道信号频谱');
            
            %绘制右音道的频谱
            P12 = P2((1:ceil((L+1)/2)),2);
            P12(2:end-1) = 2*P12(2:end-1);
            mu = mean(P12);%平均值
            sigma = std(P12); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P12(P12 < threshold) = 0;
            idx=P12>=threshold;
            bar(app.UIAxes4,f(idx),P12(idx));
            xlabel(app.UIAxes4,'频率 (Hz)');
            ylabel(app.UIAxes4,'幅度');
            title(app.UIAxes4,'右声道信号频谱');
            
            %提示绘制已完成
            msgbox('绘图已完成！');
            
            
        end

        % Value changed function: Slider
        function SliderValueChanged(app, event)
            value = app.Slider.Value;
            % 更新UIAxes控件的x轴范围
            xlim(app.UIAxes, [0 ceil(max(app.time)/value)]);
        end

        % Button pushed function: Button_7
        function Button_7Pushed(app, event)
            
            app.Player = [];% 初始化播放器对象
            
            warning off
            signal=app.audio;
            fragment=1;
            fs=app.Fs;
            
            app.Player = audioplayer(signal,fs);%创建播放器
            half_space = round(fragment*fs/2);%一半的点数
            figure%创建新图窗
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/fs,signal,'k-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,3)
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            pause(fragment);
            play(app.Player);
            app.Initial_timer = timer('BusyMode','drop','ExecutionMode', 'fixedSpacing', 'Period', fragment);%创建时间播放器
            app.Initial_timer.StartDelay = 0;
            app.Initial_timer.TimerFcn = @(~,~) sound_timer(signal,app.Player,half_space);
            start(app.Initial_timer)
            
            
            
            
            
            
            
            
            
        end

        % Button pushed function: Button_8
        function Button_8Pushed(app, event)
            stop(app.Player);
            delete(app.Player);
            delete(app.Initial_timer);%删除定时器
            
        end

        % Size changed function: Tab
        function TabSizeChanged(app, event)
            position = app.Tab.Position;
            
        end

        % Button pushed function: Button_16
        function Button_16Pushed(app, event)
            % 显示一个包含两个输入框的对话框
            prompt = {'滤波器阶数', '滤波器截止频率'};
            dlgtitle = '滤波器参数';
            dims = [1 35];
            definput = {'0', '0'};
            answer = inputdlg(prompt, dlgtitle, dims, definput);
            
            % 如果用户单击了“取消”按钮，则退出程序
            if isempty(answer)
                return;
            end
            
            % 把用户输入的字符串转换为数值
            app.low_param1 = str2double(answer{1});
            app.low_param2 = str2double(answer{2});
            
            %低通滤波器设计
            
            
            % 设计数字低通滤波器
            order = app.low_param1; % 滤波器阶数
            cutoff = app.low_param2; % 截止频率
            b = fir1(order, cutoff/(app.Fs/2), 'low',hanning(order+1)); % 设计 FIR 数字低通滤波器
            
            % 应用数字低通滤波器
            app.low_filteredAudio = filter(b, 1,app.audio);
            
            % 写入输出音频文件
            audiowrite('output_audio.wav', app.low_filteredAudio, app.Fs);
            
            %画滤波器函数波形
            [H, f] = freqz(b);
            
            plot(app.UIAxes14,f/(2*pi)*app.Fs, 20*log10(abs(H)));
            xlabel(app.UIAxes14,'Frequency (Hz)');
            ylabel(app.UIAxes14,'Amplitude Response (dB)');
            title(app.UIAxes14,'低通滤波器');
            
            %变换后音乐时域波形
            % 计算时间轴
            app.time = (0:length(app.low_filteredAudio)-1)/app.Fs;
            
            % 绘制时域波形
            plot(app.UIAxes_6,app.time, app.low_filteredAudio);
            
            ylim(app.UIAxes_6,[-1 1]);
            xlabel(app.UIAxes_6,'Time (s)');
            ylabel(app.UIAxes_6,'Amplitude');
            title(app.UIAxes_6,'时域波形');
            
            %绘制频谱
            % 计算频谱
            audio_len=length(app.low_filteredAudio);%计算音频信号的长度
            N=2^nextpow2(audio_len);
            
            Y = fft(app.low_filteredAudio,N);
            L = length(Y);
            P2 = abs(Y);
            f = app.Fs*(0:ceil((L+1)/2)-1)/L;
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)),1);
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            %控制x轴范围
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            bar(app.UIAxes2_5,f(idx),P11(idx));
            xlabel(app.UIAxes2_5,'频率 (Hz)');
            ylabel(app.UIAxes2_5,'幅度');
            title(app.UIAxes2_5,'左声道信号频谱');
            
            %绘制右音道的频谱
            P12 = P2((1:ceil((L+1)/2)),2);
            P12(2:end-1) = 2*P12(2:end-1);
            mu = mean(P12);%平均值
            sigma = std(P12); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P12(P12 < threshold) = 0;
            idx=P12>=threshold;
            bar(app.UIAxes2_7,f(idx),P12(idx));
            xlabel(app.UIAxes2_7,'频率 (Hz)');
            ylabel(app.UIAxes2_7,'幅度');
            title(app.UIAxes2_7,'右声道信号频谱');
            
            
            
            %提示绘制已完成
            msgbox('绘图已完成！');
            
            
        end

        % Button pushed function: Button_17
        function Button_17Pushed(app, event)
            % 显示一个包含两个输入框的对话框
            prompt = {'滤波器阶数', '滤波器截止频率'};
            dlgtitle = '滤波器参数';
            dims = [1 35];
            definput = {'0', '0'};
            answer = inputdlg(prompt, dlgtitle, dims, definput);
            
            % 如果用户单击了“取消”按钮，则退出程序
            if isempty(answer)
                return;
            end
            
            % 把用户输入的字符串转换为数值
            app.high_param1 = str2double(answer{1});
            app.high_param2 = str2double(answer{2});
            
            
            
            % 设计数字高通滤波器
            order = app.high_param1; % 滤波器阶数
            cutoff = app.high_param2; % 截止频率
            b = fir1(order, cutoff/(app.Fs/2), 'high',hanning(order+1)); % 设计 FIR 数字高通滤波器
            
            % 应用数字高通滤波器
            app.high_filteredAudio = filter(b, 1, app.audio);
            
            % 写入输出音频文件
            audiowrite('output_audio.wav', app.high_filteredAudio, app.Fs);
            
            %画滤波器函数波形
            [H, f] = freqz(b);
            
            plot(app.UIAxes14_2,f/(2*pi)*app.Fs, 20*log10(abs(H)));
            xlabel(app.UIAxes14_2,'Frequency (Hz)');
            ylabel(app.UIAxes14_2,'Amplitude Response (dB)');
            title(app.UIAxes14_2,'高通滤波器');
            
            %变换后音乐时域波形
            % 计算时间轴
            app.time = (0:length(app.high_filteredAudio)-1)/app.Fs;
            
            % 绘制时域波形
            plot(app.UIAxes_7,app.time,app.high_filteredAudio);
            
            ylim(app.UIAxes_7,[-1 1]);
            xlabel(app.UIAxes_7,'Time (s)');
            ylabel(app.UIAxes_7,'Amplitude');
            title(app.UIAxes_7,'时域波形');
            
            %绘制频谱
            % 计算频谱
            audio_len=length(app.high_filteredAudio);%计算音频信号的长度
            N=2^nextpow2(audio_len);
            
            Y = fft(app.high_filteredAudio,N);
            L = length(Y);
            P2 = abs(Y);
            f = app.Fs*(0:ceil((L+1)/2)-1)/L;
            
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)),1);
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            %控制x轴范围
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            bar(app.UIAxes2_8,f(idx),P11(idx));
            xlabel(app.UIAxes2_8,'频率 (Hz)');
            ylabel(app.UIAxes2_8,'幅度');
            title(app.UIAxes2_8,'左声道信号频谱');
            
            %绘制右音道的频谱
            P12 = P2((1:ceil((L+1)/2)),2);
            P12(2:end-1) = 2*P12(2:end-1);
            mu = mean(P12);%平均值
            sigma = std(P12); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P12(P12 < threshold) = 0;
            idx=P12>=threshold;
            bar(app.UIAxes2_9,f(idx),P12(idx));
            xlabel(app.UIAxes2_9,'频率 (Hz)');
            ylabel(app.UIAxes2_9,'幅度');
            title(app.UIAxes2_9,'右声道信号频谱');
            
            
            %提示绘制已完成
            msgbox('绘图已完成！');
            
        end

        % Button pushed function: Button_18
        function Button_18Pushed(app, event)
            % 显示一个包含三个输入框的对话框
            prompt = {'滤波器阶数', '中心频率','通带频率'};
            dlgtitle = '滤波器参数';
            dims = [1 35];
            definput = {'0', '0','0'};
            answer = inputdlg(prompt, dlgtitle, dims, definput);
            
            % 如果用户单击了“取消”按钮，则退出程序
            if isempty(answer)
                return;
            end
            
            % 把用户输入的字符串转换为数值
            app.allow_param1 = str2double(answer{1});
            app.allow_param2 = str2double(answer{2});
            app.allow_param3 = str2double(answer{3});
            
            %设计滤波器
            fs = app.Fs;
            order = app.allow_param1;
            
            type = 'bandpass';
            Wn = [app.allow_param2-app.allow_param3, app.allow_param2+app.allow_param3]/(fs/2);
            b = fir1(order, Wn, type,hanning(order+1));
            
            %应用带通滤波器
            app.allow_filteredAudio = filter(b, 1, app.audio);
            
            % 写入输出音频文件
            audiowrite('output_audio.wav', app.allow_filteredAudio, app.Fs);
            
            %画滤波器函数波形
            [H, f] = freqz(b);
            
            plot(app.UIAxes14_3,f/(2*pi)*app.Fs, 20*log10(abs(H)));
            xlabel(app.UIAxes14_3,'Frequency (Hz)');
            ylabel(app.UIAxes14_3,'Amplitude Response (dB)');
            title(app.UIAxes14_3,'带通滤波器函数波形');
            
            %变换后音乐时域波形
            % 计算时间轴
            app.time = (0:length(app.allow_filteredAudio)-1)/app.Fs;
            
            % 绘制时域波形
            plot(app.UIAxes_8,app.time,app.allow_filteredAudio);
            
            ylim(app.UIAxes_8,[-1 1]);
            xlabel(app.UIAxes_8,'Time (s)');
            ylabel(app.UIAxes_8,'Amplitude');
            title(app.UIAxes_8,'时域波形');
            
            %绘制频谱
            % 计算频谱
            audio_len=length(app.allow_filteredAudio);%计算音频信号的长度
            N=2^nextpow2(audio_len);
            
            Y = fft(app.allow_filteredAudio,N);
            L = length(Y);
            P2 = abs(Y);
            f = app.Fs*(0:ceil((L+1)/2)-1)/L;
            
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)),1);
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            %控制x轴范围
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            bar(app.UIAxes2_10,f(idx),P11(idx));
            xlabel(app.UIAxes2_10,'频率 (Hz)');
            ylabel(app.UIAxes2_10,'幅度');
            title(app.UIAxes2_10,'左声道信号频谱');
            
            %绘制右音道的频谱
            P12 = P2((1:ceil((L+1)/2)),2);
            P12(2:end-1) = 2*P12(2:end-1);
            mu = mean(P12);%平均值
            sigma = std(P12); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P12(P12 < threshold) = 0;
            idx=P12>=threshold;
            bar(app.UIAxes2_11,f(idx),P12(idx));
            xlabel(app.UIAxes2_11,'频率 (Hz)');
            ylabel(app.UIAxes2_11,'幅度');
            title(app.UIAxes2_11,'右声道信号频谱');
            
            
            
            %提示绘制已完成
            msgbox('绘图已完成！');
            
        end

        % Button pushed function: Button_19
        function Button_19Pushed(app, event)
            % 显示一个包含四个输入框的对话框
            prompt = {'滤波器阶数', '下截止频率','上截止频率','带宽'};
            dlgtitle = '滤波器参数';
            dims = [1 35];
            definput = {'0', '0','0','0'};
            answer = inputdlg(prompt, dlgtitle, dims, definput);
            
            % 如果用户单击了“取消”按钮，则退出程序
            if isempty(answer)
                return;
            end
            
            % 把用户输入的字符串转换为数值
            app.ban_param1 = str2double(answer{1});
            app.ban_param2 = str2double(answer{2});
            app.ban_param3 = str2double(answer{3});
            app.ban_param4 = str2double(answer{4});
            
            %设计带阻滤波器
            fs =app.Fs;
            order =  app.ban_param1;
            cutoff_freq = [app.ban_param2, app.ban_param3];
            bandwidth =  app.ban_param4;
            type = 'stop';
            Wn = [cutoff_freq(1)-bandwidth/2, cutoff_freq(2)+bandwidth/2]/(fs/2);
            
            b = fir1(order, Wn, type,hanning(order+1));
            
            %应用带通滤波器
            app.ban_filteredAudio = filter(b, 1, app.audio);
            
            % 写入输出音频文件
            audiowrite('output_audio.wav', app.ban_filteredAudio, app.Fs);
            
            %画滤波器函数波形
            [H, f] = freqz(b);
            
            plot(app.UIAxes14_4,f/(2*pi)*app.Fs, 20*log10(abs(H)));
            xlabel(app.UIAxes14_4,'Frequency (Hz)');
            ylabel(app.UIAxes14_4,'Amplitude Response (dB)');
            title(app.UIAxes14_4,'带阻滤波器函数波形');
            
            %变换后音乐时域波形
            % 计算时间轴
            app.time = (0:length(app.ban_filteredAudio)-1)/app.Fs;
            
            % 绘制时域波形
            plot(app.UIAxes_9,app.time,app.ban_filteredAudio);
            
            ylim(app.UIAxes_9,[-1 1]);
            xlabel(app.UIAxes_9,'Time (s)');
            ylabel(app.UIAxes_9,'Amplitude');
            title(app.UIAxes_9,'时域波形');
            
            %绘制频谱
            % 计算频谱
            audio_len=length(app.ban_filteredAudio);%计算音频信号的长度
            N=2^nextpow2(audio_len);
            
            Y = fft(app.ban_filteredAudio,N);
            L = length(Y);
            P2 = abs(Y);
            f = app.Fs*(0:ceil((L+1)/2)-1)/L;
            
            %绘制左音道的频谱
            P11 = P2((1:ceil((L+1)/2)),1);
            P11(2:end-1) = 2*P11(2:end-1);
            mu = mean(P11);%平均值
            sigma = std(P11); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            %控制x轴范围
            P11(P11 < threshold) = 0;
            idx=P11>=threshold;
            bar(app.UIAxes2_12,f(idx),P11(idx));
            xlabel(app.UIAxes2_12,'频率 (Hz)');
            ylabel(app.UIAxes2_12,'幅度');
            title(app.UIAxes2_12,'左声道信号频谱');
            
            %绘制右音道的频谱
            P12 = P2((1:ceil((L+1)/2)),2);
            P12(2:end-1) = 2*P12(2:end-1);
            mu = mean(P12);%平均值
            sigma = std(P12); % 标准差
            threshold = mu + 3*sigma; % 幅值阈值
            P12(P12 < threshold) = 0;
            idx=P12>=threshold;
            bar(app.UIAxes2_11,f(idx),P12(idx));
            xlabel(app.UIAxes2_13,'频率 (Hz)');
            ylabel(app.UIAxes2_13,'幅度');
            title(app.UIAxes2_13,'右声道信号频谱');
            
            
            
            %提示绘制已完成
            msgbox('绘图已完成！');
            
        end

        % Button pushed function: Button_5
        function Button_5Pushed(app, event)
            %低通滤波器播放函数
            warning off
            signal=app.low_filteredAudio;
            fragment=1;
            fs=app.Fs;
            
            app.low_Player = audioplayer(signal,fs);%创建播放器
            half_space = round(fragment*fs/2);%一半的点数
            figure%创建新图窗
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/fs,signal,'k-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,3)
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            pause(fragment);
            play(app.low_Player);
            app.low_timer = timer('BusyMode','drop','ExecutionMode', 'fixedSpacing', 'Period', fragment);%创建时间播放器
            app.low_timer.StartDelay = 0;
            app.low_timer.TimerFcn = @(~,~) sound_timer(signal,app.low_Player,half_space);
            start(app.low_timer)
        end

        % Button pushed function: Button_9
        function Button_9Pushed(app, event)
            %低通滤波器结束函数
            stop(app.low_Player);
            delete(app.low_Player);
            delete(app.Low_timer);
        end

        % Button pushed function: Button_10
        function Button_10Pushed(app, event)
            %高通滤波器播放函数
            warning off
            signal=app.high_filteredAudio;
            fragment=1;
            fs=app.Fs;
            
            app.high_Player = audioplayer(signal,fs);%创建播放器
            half_space = round(fragment*fs/2);%一半的点数
            figure%创建新图窗
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/fs,signal,'k-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,3)
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            pause(fragment);
            play(app.high_Player);
            app.high_timer = timer('BusyMode','drop','ExecutionMode', 'fixedSpacing', 'Period', fragment);%创建时间播放器
            app.high_timer.StartDelay = 0;
            app.high_timer.TimerFcn = @(~,~) sound_timer(signal,app.high_Player,half_space);
            start(app.high_timer)
        end

        % Button pushed function: Button_12
        function Button_12Pushed(app, event)
            %带通滤波器播放函数
            warning off
            signal=app.allow_filteredAudio;
            fragment=1;
            fs=app.Fs;
            
            app.allow_Player = audioplayer(signal,fs);%创建播放器
            half_space = round(fragment*fs/2);%一半的点数
            figure%创建新图窗
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/fs,signal,'k-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,3)
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            pause(fragment);
            play(app.allow_Player);
            app.allow_timer = timer('BusyMode','drop','ExecutionMode', 'fixedSpacing', 'Period', fragment);%创建时间播放器
            app.allow_timer.StartDelay = 0;
            app.allow_timer.TimerFcn = @(~,~) sound_timer(signal,app.allow_Player,half_space);
            start(app.allow_timer)
        end

        % Button pushed function: Button_14
        function Button_14Pushed(app, event)
           
            warning off
            signal=app.ban_filteredAudio;
            fragment=1;
            fs=app.Fs;
            
            app.ban_Player = audioplayer(signal,fs);%创建播放器
            half_space = round(fragment*fs/2);%一半的点数
            figure%创建新图窗
            subplot(3,1,1)
            plot(([1:length(signal)]-1)/fs,signal,'k-')
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,2)
            
            xlabel('时间/s')
            ylabel('幅值')
            subplot(3,1,3)
            xlabel('频率 (Hz)');
            ylabel('幅度');
            title('信号实时频谱');
            pause(fragment);
            play(app.ban_Player);
            app.ban_timer = timer('BusyMode','drop','ExecutionMode', 'fixedSpacing', 'Period', fragment);%创建时间播放器
            app.ban_timer.StartDelay = 0;
            app.ban_timer.TimerFcn = @(~,~) sound_timer(signal,app.ban_Player,half_space);
            start(app.ban_timer)
        end

        % Button pushed function: Button_15
        function Button_15Pushed(app, event)
            %带阻滤波器结束函数
            stop(app.ban_Player);
            delete(app.ban_Player);
            delete(app.ban_timer);
        end

        % Button pushed function: Button_11
        function Button_11Pushed(app, event)
            %高通滤波器结束函数
            stop(app.high_Player);
            delete(app.high_Player);
            delete(app.high_timer);
        end

        % Button pushed function: Button_13
        function Button_13Pushed(app, event)
            %带通滤波器结束函数
            stop(app.allow_Player);
            delete(app.allow_Player);
            delete(app.allow_timer);
        end

        % Size changed function: Tab_6
        function Tab_6SizeChanged(app, event)
            position = app.Tab_6.Position;
            
        end

        % Size changed function: Tab_7
        function Tab_7SizeChanged(app, event)
            position = app.Tab_7.Position;
            
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [125 125 1255 836];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.WindowState = 'fullscreen';

            % Create Menu
            app.Menu = uimenu(app.UIFigure);
            app.Menu.Text = '菜单';

            % Create Menu_2
            app.Menu_2 = uimenu(app.Menu);
            app.Menu_2.MenuSelectedFcn = createCallbackFcn(app, @Menu_2Selected, true);
            app.Menu_2.Text = '选择音乐文件';

            % Create Menu_3
            app.Menu_3 = uimenu(app.Menu);
            app.Menu_3.MenuSelectedFcn = createCallbackFcn(app, @Menu_3Selected, true);
            app.Menu_3.Text = '退出';

            % Create Menu_4
            app.Menu_4 = uimenu(app.UIFigure);
            app.Menu_4.Tooltip = {'这是数字调音台'};
            app.Menu_4.Text = '关于';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Title')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.TitleFontWeight = 'bold';
            app.UIAxes.Position = [44 603 300 185];

            % Create Label_2
            app.Label_2 = uilabel(app.UIFigure);
            app.Label_2.Position = [177 810 77 22];
            app.Label_2.Text = '信号时域波形';

            % Create Label_6
            app.Label_6 = uilabel(app.UIFigure);
            app.Label_6.HorizontalAlignment = 'right';
            app.Label_6.Position = [318 532 55 22];
            app.Label_6.Text = '缩放显示';

            % Create Slider
            app.Slider = uislider(app.UIFigure);
            app.Slider.ValueChangedFcn = createCallbackFcn(app, @SliderValueChanged, true);
            app.Slider.Position = [394 541 150 3];

            % Create Panel
            app.Panel = uipanel(app.UIFigure);
            app.Panel.Title = '信号频谱';
            app.Panel.Position = [562 579 686 232];

            % Create UIAxes3
            app.UIAxes3 = uiaxes(app.Panel);
            title(app.UIAxes3, 'Title')
            xlabel(app.UIAxes3, 'X')
            ylabel(app.UIAxes3, 'Y')
            app.UIAxes3.TitleFontWeight = 'bold';
            app.UIAxes3.Position = [1 21 259 184.994750976563];

            % Create UIAxes4
            app.UIAxes4 = uiaxes(app.Panel);
            title(app.UIAxes4, 'Title')
            xlabel(app.UIAxes4, 'X')
            ylabel(app.UIAxes4, 'Y')
            app.UIAxes4.TitleFontWeight = 'bold';
            app.UIAxes4.Position = [309 21 300 185];

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigure);
            app.TabGroup.Position = [62 18 1135 471];

            % Create Tab
            app.Tab = uitab(app.TabGroup);
            app.Tab.Tooltip = {'选择低通滤波'};
            app.Tab.SizeChangedFcn = createCallbackFcn(app, @TabSizeChanged, true);
            app.Tab.Title = '低通';

            % Create Label_15
            app.Label_15 = uilabel(app.Tab);
            app.Label_15.Position = [109 202 114 22];
            app.Label_15.Text = '变换后信号时域波形';

            % Create UIAxes_6
            app.UIAxes_6 = uiaxes(app.Tab);
            title(app.UIAxes_6, 'Title')
            xlabel(app.UIAxes_6, 'X')
            ylabel(app.UIAxes_6, 'Y')
            app.UIAxes_6.TitleFontWeight = 'bold';
            app.UIAxes_6.Position = [16 51 300 185];

            % Create Button_5
            app.Button_5 = uibutton(app.Tab, 'push');
            app.Button_5.ButtonPushedFcn = createCallbackFcn(app, @Button_5Pushed, true);
            app.Button_5.Position = [357 180 100 24];
            app.Button_5.Text = '播放';

            % Create UIAxes2_5
            app.UIAxes2_5 = uiaxes(app.Tab);
            title(app.UIAxes2_5, 'Title')
            xlabel(app.UIAxes2_5, 'X')
            ylabel(app.UIAxes2_5, 'Y')
            app.UIAxes2_5.TitleFontWeight = 'bold';
            app.UIAxes2_5.Position = [490 39 300 185];

            % Create UIAxes2_7
            app.UIAxes2_7 = uiaxes(app.Tab);
            title(app.UIAxes2_7, 'Title')
            xlabel(app.UIAxes2_7, 'X')
            ylabel(app.UIAxes2_7, 'Y')
            app.UIAxes2_7.TitleFontWeight = 'bold';
            app.UIAxes2_7.Position = [810 39 300 185];

            % Create Button_9
            app.Button_9 = uibutton(app.Tab, 'push');
            app.Button_9.ButtonPushedFcn = createCallbackFcn(app, @Button_9Pushed, true);
            app.Button_9.Position = [357 100 100 26];
            app.Button_9.Text = '结束';

            % Create UIAxes14
            app.UIAxes14 = uiaxes(app.Tab);
            title(app.UIAxes14, 'Title')
            xlabel(app.UIAxes14, 'X')
            ylabel(app.UIAxes14, 'Y')
            app.UIAxes14.TitleFontWeight = 'bold';
            app.UIAxes14.Position = [500 245 300 185];

            % Create Button_16
            app.Button_16 = uibutton(app.Tab, 'push');
            app.Button_16.ButtonPushedFcn = createCallbackFcn(app, @Button_16Pushed, true);
            app.Button_16.Position = [116 367 100 26];
            app.Button_16.Text = '滤波器参数';

            % Create Tab_5
            app.Tab_5 = uitab(app.TabGroup);
            app.Tab_5.Tooltip = {'选择高通滤波'};
            app.Tab_5.Title = '高通';

            % Create Label_17
            app.Label_17 = uilabel(app.Tab_5);
            app.Label_17.Position = [134 182 114 22];
            app.Label_17.Text = '';

            % Create UIAxes_7
            app.UIAxes_7 = uiaxes(app.Tab_5);
            title(app.UIAxes_7, 'Title')
            xlabel(app.UIAxes_7, 'X')
            ylabel(app.UIAxes_7, 'Y')
            app.UIAxes_7.TitleFontWeight = 'bold';
            app.UIAxes_7.Position = [30 28 300 185];

            % Create Button_10
            app.Button_10 = uibutton(app.Tab_5, 'push');
            app.Button_10.ButtonPushedFcn = createCallbackFcn(app, @Button_10Pushed, true);
            app.Button_10.Position = [384 156 100 24];
            app.Button_10.Text = '播放';

            % Create Button_11
            app.Button_11 = uibutton(app.Tab_5, 'push');
            app.Button_11.ButtonPushedFcn = createCallbackFcn(app, @Button_11Pushed, true);
            app.Button_11.Position = [384 76 100 26];
            app.Button_11.Text = '结束';

            % Create Label_18
            app.Label_18 = uilabel(app.Tab_5);
            app.Label_18.Position = [793 182 90 22];
            app.Label_18.Text = '';

            % Create UIAxes2_8
            app.UIAxes2_8 = uiaxes(app.Tab_5);
            title(app.UIAxes2_8, 'Title')
            xlabel(app.UIAxes2_8, 'X')
            ylabel(app.UIAxes2_8, 'Y')
            app.UIAxes2_8.TitleFontWeight = 'bold';
            app.UIAxes2_8.Position = [516 28 300 185];

            % Create UIAxes2_9
            app.UIAxes2_9 = uiaxes(app.Tab_5);
            title(app.UIAxes2_9, 'Title')
            xlabel(app.UIAxes2_9, 'X')
            ylabel(app.UIAxes2_9, 'Y')
            app.UIAxes2_9.TitleFontWeight = 'bold';
            app.UIAxes2_9.Position = [836 28 300 185];

            % Create UIAxes14_2
            app.UIAxes14_2 = uiaxes(app.Tab_5);
            title(app.UIAxes14_2, 'Title')
            xlabel(app.UIAxes14_2, 'X')
            ylabel(app.UIAxes14_2, 'Y')
            app.UIAxes14_2.TitleFontWeight = 'bold';
            app.UIAxes14_2.Position = [582 243 300 185];

            % Create Button_17
            app.Button_17 = uibutton(app.Tab_5, 'push');
            app.Button_17.ButtonPushedFcn = createCallbackFcn(app, @Button_17Pushed, true);
            app.Button_17.Position = [161 334 100 26];
            app.Button_17.Text = '滤波器参数';

            % Create Tab_6
            app.Tab_6 = uitab(app.TabGroup);
            app.Tab_6.Tooltip = {'选择带通滤波'};
            app.Tab_6.SizeChangedFcn = createCallbackFcn(app, @Tab_6SizeChanged, true);
            app.Tab_6.Title = '带通';

            % Create UIAxes_8
            app.UIAxes_8 = uiaxes(app.Tab_6);
            title(app.UIAxes_8, 'Title')
            xlabel(app.UIAxes_8, 'X')
            ylabel(app.UIAxes_8, 'Y')
            app.UIAxes_8.TitleFontWeight = 'bold';
            app.UIAxes_8.Position = [5 33 300 185];

            % Create Button_12
            app.Button_12 = uibutton(app.Tab_6, 'push');
            app.Button_12.ButtonPushedFcn = createCallbackFcn(app, @Button_12Pushed, true);
            app.Button_12.Position = [341 170 100 24];
            app.Button_12.Text = '播放';

            % Create Button_13
            app.Button_13 = uibutton(app.Tab_6, 'push');
            app.Button_13.ButtonPushedFcn = createCallbackFcn(app, @Button_13Pushed, true);
            app.Button_13.Position = [341 90 100 26];
            app.Button_13.Text = '结束';

            % Create UIAxes2_10
            app.UIAxes2_10 = uiaxes(app.Tab_6);
            title(app.UIAxes2_10, 'Title')
            xlabel(app.UIAxes2_10, 'X')
            ylabel(app.UIAxes2_10, 'Y')
            app.UIAxes2_10.TitleFontWeight = 'bold';
            app.UIAxes2_10.Position = [491 28 300 185];

            % Create UIAxes2_11
            app.UIAxes2_11 = uiaxes(app.Tab_6);
            title(app.UIAxes2_11, 'Title')
            xlabel(app.UIAxes2_11, 'X')
            ylabel(app.UIAxes2_11, 'Y')
            app.UIAxes2_11.TitleFontWeight = 'bold';
            app.UIAxes2_11.Position = [811 28 300 185];

            % Create UIAxes14_3
            app.UIAxes14_3 = uiaxes(app.Tab_6);
            title(app.UIAxes14_3, 'Title')
            xlabel(app.UIAxes14_3, 'X')
            ylabel(app.UIAxes14_3, 'Y')
            app.UIAxes14_3.TitleFontWeight = 'bold';
            app.UIAxes14_3.Position = [501 235 300 185];

            % Create Button_18
            app.Button_18 = uibutton(app.Tab_6, 'push');
            app.Button_18.ButtonPushedFcn = createCallbackFcn(app, @Button_18Pushed, true);
            app.Button_18.Position = [116 325 100 26];
            app.Button_18.Text = '滤波器参数';

            % Create Tab_7
            app.Tab_7 = uitab(app.TabGroup);
            app.Tab_7.Tooltip = {'选择带阻滤波'};
            app.Tab_7.SizeChangedFcn = createCallbackFcn(app, @Tab_7SizeChanged, true);
            app.Tab_7.Title = '带阻';

            % Create UIAxes_9
            app.UIAxes_9 = uiaxes(app.Tab_7);
            title(app.UIAxes_9, 'Title')
            xlabel(app.UIAxes_9, 'X')
            ylabel(app.UIAxes_9, 'Y')
            app.UIAxes_9.TitleFontWeight = 'bold';
            app.UIAxes_9.Position = [15 16 300 185];

            % Create Button_14
            app.Button_14 = uibutton(app.Tab_7, 'push');
            app.Button_14.ButtonPushedFcn = createCallbackFcn(app, @Button_14Pushed, true);
            app.Button_14.Position = [351 158 100 24];
            app.Button_14.Text = '播放';

            % Create Button_15
            app.Button_15 = uibutton(app.Tab_7, 'push');
            app.Button_15.ButtonPushedFcn = createCallbackFcn(app, @Button_15Pushed, true);
            app.Button_15.Position = [351 78 100 26];
            app.Button_15.Text = '结束';

            % Create UIAxes2_12
            app.UIAxes2_12 = uiaxes(app.Tab_7);
            title(app.UIAxes2_12, 'Title')
            xlabel(app.UIAxes2_12, 'X')
            ylabel(app.UIAxes2_12, 'Y')
            app.UIAxes2_12.TitleFontWeight = 'bold';
            app.UIAxes2_12.Position = [501 21 300 185];

            % Create UIAxes2_13
            app.UIAxes2_13 = uiaxes(app.Tab_7);
            title(app.UIAxes2_13, 'Title')
            xlabel(app.UIAxes2_13, 'X')
            ylabel(app.UIAxes2_13, 'Y')
            app.UIAxes2_13.TitleFontWeight = 'bold';
            app.UIAxes2_13.Position = [821 21 300 185];

            % Create UIAxes14_4
            app.UIAxes14_4 = uiaxes(app.Tab_7);
            title(app.UIAxes14_4, 'Title')
            xlabel(app.UIAxes14_4, 'X')
            ylabel(app.UIAxes14_4, 'Y')
            app.UIAxes14_4.TitleFontWeight = 'bold';
            app.UIAxes14_4.Position = [512 242 300 185];

            % Create Button_19
            app.Button_19 = uibutton(app.Tab_7, 'push');
            app.Button_19.ButtonPushedFcn = createCallbackFcn(app, @Button_19Pushed, true);
            app.Button_19.Position = [123 326 100 26];
            app.Button_19.Text = '滤波器参数';

            % Create Button_7
            app.Button_7 = uibutton(app.UIFigure, 'push');
            app.Button_7.ButtonPushedFcn = createCallbackFcn(app, @Button_7Pushed, true);
            app.Button_7.Position = [399 745 100 25];
            app.Button_7.Text = '播放';

            % Create Button_8
            app.Button_8 = uibutton(app.UIFigure, 'push');
            app.Button_8.ButtonPushedFcn = createCallbackFcn(app, @Button_8Pushed, true);
            app.Button_8.Position = [399 661 100 26];
            app.Button_8.Text = '结束';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = music

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
